package logic

import "fmt"

const (
	// –¢–∏–ø—ã –æ—Ç–≤–µ—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	TypeStr   = "str"
	TypeImg   = "img"
	TypeAudio = "audio"

	// –§–∞–π–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–ø–∞
	ImgFile1   = "files/123.jpg"
	AudioFile1 = "files/alt.mp3"

	// –°–æ–æ–±—â–µ–Ω–∏—è –°–ø—Ä–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–ø–∞
	ReferStage1 = "–¢–µ–±–µ –Ω—É–∂–Ω–æ 111"
	ReferStage2 = "–¢–µ–±–µ –Ω—É–∂–Ω–æ 222"
	ReferStage3 = "–¢–µ–±–µ –Ω—É–∂–Ω–æ 333"
	ReferStage4 = "–¢–µ–±–µ –Ω—É–∂–Ω–æ 444"
	ReferStage5 = "–¢–µ–±–µ –Ω—É–∂–Ω–æ 555"
	ReferStage6 = "–¢–µ–±–µ –Ω—É–∂–Ω–æ 666"
	ReferStage7 = "–¢–µ–±–µ –Ω—É–∂–Ω–æ 777"
	ReferStage8 = "–¢–µ–±–µ –Ω—É–∂–Ω–æ 888"

	// –û—Ç–≤–µ—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

	// –¢–µ–∫—Å—Ç –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
	RespDubleOpening = "–¢—ã —É–∂–µ –Ω–∞—á–∞–ª –∏–≥—Ä—É"
	// –¢–µ–∫—Å—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
	RespStage1  = "–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π –∏–≥—Ä–æ–∫\\! –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º –Ω–µ –≤—ã—à–ª–∞ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º: –∫–æ–µ\\-–∫—Ç–æ –ø–æ—Ö–∏—Ç–∏–ª –ø–æ–¥–∞—Ä–∫–∏, –≤–∫–ª—é—á–∞—è –î–µ–¥–∞ –ú–æ—Ä–æ–∑–∞\\! –¢–µ–ø–µ—Ä—å —Ç—ã –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ —É–º–µ–Ω–∏—è, —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —ç—Ç–∏ –ø–æ–¥–∞—Ä–∫–∏ –∏ —Å–ø–∞—Å—Ç–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫\\. –£–¥–∞—á–∏\\! ‚òÉÔ∏èüéÅüéÖ \n–ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º\\:"
	RespStage11 = " \n–í –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–µ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏ –ø–æ 3 –∫–æ–¥–∞, –∞ –¥–∞–ª—å—à–µ –¥—É–º–∞—é –≤—ã —Ä–∞–∑–±–µ—Ä–µ—Ç–µ—Å—å —Å–∞–º–∏"
	RespStage2  = "–ú–æ–ª–æ–¥–µ—Ü, –≤–æ—Ç —Ç–µ–±–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: 666" // –ù–∞—á–∞–ª–æ –≤—Ç–æ—Ä–æ–≥–æ —ç—Ç–∞–ø–∞
	RespStage3  = "stage 3"                                     // –ò —Ç.–¥.
	RespStage4  = "stage 4"
	RespStage5  = "–ü—Ä–∏—à–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"

	// –°–æ–æ–±—â–µ–Ω–∏—è –≤–≤–æ–¥–∏–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
	CommandStart = "start"
	ReqReference = "–°–ø—Ä–∞–≤–∫–∞"
	ReqStage2    = "2"
	ReqStage3    = "3"
	ReqStage4    = "4"
	ReqStage5    = "5"

	// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏ –¥–ª—è —é–∑–µ—Ä–∞
	gameLocation1 = "54.596341, 55.800177"
	gameLocation2 = "54.000000, 55.000000"
	gameLocation3 = "54.123456, 55.123456"

	// –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
	refLat1 = 54.596341
	refLon1 = 55.800177
)

type RespMsg struct {
	Message      string
	Type         string
	FilePath     string
	Stage        int
	ReferenceMsg string
}

type RefLocation struct {
	Longitude    float64
	Latitude     float64
	CorrectMsg   string
	IncorrectMsg string
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func ProcessMessagesText(txt string, pullStage int) RespMsg {

	switch txt {
	case ReqReference:
		var message string
		switch pullStage {
		case 1:
			message = ReferStage1
		case 2:
			message = ReferStage2
		case 3:
			message = ReferStage3
		case 4:
			message = ReferStage4
		case 5:
			message = ReferStage5
		case 6:
			message = ReferStage6
		case 7:
			message = ReferStage7
		case 8:
			message = ReferStage8
		}

		return RespMsg{
			Message: message,
			Type:    TypeStr,
			Stage:   0,
		}

	case ReqStage2:
		if pullStage == 1 {
			return RespMsg{
				Message: RespStage2,
				Type:    TypeStr,
				Stage:   2,
			}
		}

	case ReqStage3:
		if pullStage == 2 {
			return RespMsg{
				Message:  RespStage3,
				Type:     TypeImg,
				FilePath: ImgFile1,
				Stage:    3,
			}
		}

	case ReqStage4:
		if pullStage == 3 {
			return RespMsg{
				Message:  RespStage4,
				Type:     TypeAudio,
				FilePath: AudioFile1,
				Stage:    4,
			}
		}
	case ReqStage5:
		if pullStage == 4 {
			return RespMsg{
				Message: RespStage5,
				Type:    TypeStr,
				Stage:   5,
			}
		}
	}
	return RespMsg{}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞)
func ProcessMessagesCommand(com string, pullStage int) RespMsg {

	switch com {
	case CommandStart:
		if pullStage == 0 {
			return RespMsg{
				Message: RespStage1 + fmt.Sprintf("\n`%v`\n", gameLocation1) + fmt.Sprintf("\n`%v`\n", gameLocation2) + fmt.Sprintf("\n`%v`\n", gameLocation3) + RespStage11,
				Type:    TypeStr,
				Stage:   1,
			}
		} else {
			return RespMsg{
				Message: RespDubleOpening,
				Type:    TypeStr,
				Stage:   1,
			}
		}
	}
	return RespMsg{}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
func ProcessLocation(pullStage int) RefLocation {

	switch pullStage {
	case 5:
		return RefLocation{
			Latitude:     refLat1,
			Longitude:    refLon1,
			CorrectMsg:   "–ú–æ–ª–æ–¥–µ—Ü! –¢–µ–ø–µ—Ä—å —Ç—ã –¥–æ–ª–∂–µ–Ω 555",
			IncorrectMsg: "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ",
		}
	}

	return RefLocation{}

}
