package logic

import (
	"fmt"
	"strings"
)

const (
	// –¢–∏–ø—ã –æ—Ç–≤–µ—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	TypeStr   = "str"
	TypeImg   = "img"
	TypeImgs  = "imgs"
	TypeAudio = "audio"

	// –§–∞–π–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–ø–∞
	ImgFileKrDom  = "files/krdom.jpg"
	ImgFileOblast = "files/oblast.png"
	ImgNews1      = "files/news1.jpg"
	ImgNews2      = "files/news2.jpg"
	ImgNews3      = "files/news3.jpg"
	ImgNews4      = "files/news4.png"
	ImgNews5      = "files/news5.png"
	ImgNews6      = "files/news6.png"
	ImgNews7      = "files/news7.png"

	AudioFileDedMoroz     = "files/ded.mp3"
	AudioFileDedMorozName = "–≠—Ç–æ –µ—â–µ –Ω–µ –∫–æ–Ω–µ—Ü"
	AudioFileShturval     = "files/shturval.mp3"
	AudioFileShturvalName = "–û—á–µ–Ω—å –≥–æ—Ä—è—á–æ"

	// –û—Ç–≤–µ—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

	// –¢–µ–∫—Å—Ç –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
	RespDubleOpening = "–¢—ã —É–∂–µ –Ω–∞—á–∞–ª –∏–≥—Ä—É"

	RespStage1  = "–ù–µ –¥–æ–±—Ä–æ–≥–æ –≤–µ—á–µ—Ä–∞ –≤–∞–º\\! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –¥–∞–∂–µ –Ω–µ –∑–∞–º–µ—Ç–∏–ª–∏ –∫–∞–∫ –ø—Ä–æ–ø–∞–ª –≤–∞—à –¥—Ä—É–≥, –∞ —Å –Ω–∏–º –∏ –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏\\.\n\n–ß—Ç–æ–±—ã —Å–ø–∞—Å—Ç–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–¥–∞—Ä–∫–∏, –≤—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ –º–æ–∑–≥–∏ –∏ –ª–æ–≤–∫–æ—Å—Ç—å, –µ—Å–ª–∏ —Å–º–æ–∂–µ—Ç–µ, –∫–æ–Ω–µ—á–Ω–æ‚ò†Ô∏è‚ò†Ô∏è‚ò†Ô∏è\\. –ò –ø–æ–º–Ω–∏—Ç–µ, —á–µ–º –¥–æ–ª—å—à–µ –≤—ã –¥–µ–π—Å—Ç–≤—É–µ—Ç–µ, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ –∑–∞–º–µ—Ä–∑–∞–µ—Ç –≤–∞—à –¥—Ä—É–≥ü•∂ü•∂ü•∂\\. –£–¥–∞—á–∏\\!\n\n–ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º\\:"
	RespStage11 = " \n_–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ–ø–∏—Ä—É—é—Ç—Å—è –∫–ª–∏–∫–æ–º\\. \n–°–æ–±–µ—Ä–∏—Ç–µ –∏–∑ –≤—Å–µ—Ö —Ç–æ—á–µ–∫ –æ–¥–∏–Ω –∫–æ–¥_ üíÄ üß± ‚ö°Ô∏è\\."
	ReqStage1   = "473"

	RespStage2 = "–£ –≤–∞—Å –ø–æ–ª—É—á–∏–ª–æ—Å—å, —á—Ç–æ –∂–µ, —ç—Ç–æ –±—ã–ª–æ –ø—Ä–æ—Å—Ç–æ\\! –¢–µ–ø–µ—Ä—å –ø–æ–∏–≥—Ä–∞–µ–º –≤ –≥–æ—Ä—è—á–æ\\-—Ö–æ–ª–æ–¥–Ω–æ\\: –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –∞ —è –±—É–¥—É –≥–æ–≤–æ—Ä–∏—Ç—å –±–ª–∏–∑–∫–æ –≤—ã –∏–ª–∏ –¥–∞–ª–µ–∫–æ, –≤ —Ü–µ–ª–µ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏ –Ω–∞–π–¥–∏—Ç–µ –æ–¥–∏–Ω –∫–æ–¥\\. \n\n_–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —á–µ—Ä–µ–∑ –≤–ª–æ–∂–µ–Ω–∏—è \\-\\> –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è, –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–ª–æ–π —Å–ø—É—Ç–Ω–∏–∫_\\."
	ReqStage2  = "6"

	RespStage3 = "–•–º, —É –≤–∞—Å –ø–æ–ª—É—á–∏–ª–æ—Å—å\\.\n–¢–µ–ø–µ—Ä—å –Ω–∞–π–¥–∏—Ç–µ –µ—â–µ 3 –∫–æ–¥–∞ –≤ –æ–¥–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –∏ —Å–æ–±–µ—Ä–∏—Ç–µ –∏–∑ –Ω–∏—Ö —Ñ—Ä–∞–∑—É\\.\n\n_–ö–æ–¥—ã –∫—Ä–∞—Å–Ω—ã–º –º–∞—Ä–∫–µ—Ä–æ–º —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º HNY\\.\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã\\:_" // –ù–∞—á–∞–ª–æ –≤—Ç–æ—Ä–æ–≥–æ —ç—Ç–∞–ø–∞
	ReqStage3  = "–≤–∞—à –¥—Ä—É–≥ —Ä—è–¥–æ–º"

	RespStage4 = "–ê —Ç–µ–ø–µ—Ä—å, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–ø–∞—Å—Ç–∏ —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞, –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Å—é –≥–ª—É–±–∏–Ω—É —Å—Ç—Ä–∞—Ö–∞ –∏ –æ—Ç—á–∞—è–Ω–∏—è\\."
	ReqStage4  = "–º–æ—è –ø—Ä–µ–ª–µ—Å—Ç—å"

	ReqStage5 = "–ø–æ–¥–∞—Ä–∫–∏ –º–æ–∏"

	RespStage6   = "–ü–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –Ω–∞–ø–∏—Ç–∫–∏\\? –î–∞ –∏–ª–∏ –Ω–µ—Ç\\?"
	ReqStage6Net = "–Ω–µ—Ç"
	ReqStage6Da  = "–¥–∞"

	RespStage7Pidor   = "–ü–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç\\! \n–ü–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –Ω–∞–ø–∏—Ç–∫–∏\\? –î–∞ –∏–ª–∏ –Ω–µ—Ç\\?"
	RespStage7NePidor = "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ\\! –ê —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –≤—ã –ø–æ–º–Ω–∏—Ç–µ —ç—Ç–æ—Ç –≥–æ–¥:"
	ReqStage7         = "8086930"

	RespStage8 = "–ì–æ–≤–æ—Ä—è—Ç, —á—Ç–æ —É –∏—Å—Ç–æ—Ä–∏–∏ –æ —Ç—Ä–µ—Ö —Å–≤–∏–Ω—å—è—Ö —Å—á–∞—Å—Ç–ª–∏–≤—ã–π –∫–æ–Ω–µ—Ü, –Ω–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –≤–æ–ª–∫ –Ω–µ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞–π—Ç–∏ –∏—Ö\\. –î–æ –Ω–µ–≥–æ –¥–æ—à–ª–∏ —Å–ª—É—Ö–∏, —á—Ç–æ –∫–∞–∂–¥—ã–π —Å–≤–∏–Ω —Å–ø—Ä—è—Ç–∞–ª—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö\\: \n\n" +
		"\\- –ü–µ—Ä–≤—ã–π —É–µ—Ö–∞–ª –≤ –∂–∞—Ä–∫–∏–µ —Å—Ç—Ä–∞–Ω—ã\n\n" +
		"\\- –í—Ç–æ—Ä–æ–π —É—Å—Ç—Ä–æ–∏–ª—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –æ—á–∏—Å—Ç–Ω—ã–µ —Å–æ–æ—Ä—É–∂–µ–Ω–∏—è\n\n" +
		"\\- –¢—Ä–µ—Ç–∏–π —Å—Ç–∞–ª –≥—Ä–∏–º—ë—Ä–æ–º"
	ReqStage8  = "366"
	RespStage9 = "–í—ã –ø–æ–∫–∞–∑–∞–ª–∏ —Å–µ–±—è —Å—Ç–æ–π–∫–∏–º–∏, —É–ø–æ—Ä–Ω—ã–º–∏ –∏ –Ω–∞—Ö–æ–¥—á–∏–≤—ã–º–∏\\. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –≤—Å–µ, —á—Ç–æ–±—ã –æ—Ç—ã—Å–∫–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏\\.\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é\\!\n\n" +
		"–ü–æ–¥–∞—Ä–∫–∏ –∏—â–∏—Ç–µ –≤ —Ç–µ–º–Ω–æ–º, —Ö–æ–ª–æ–¥–Ω–æ–º –º–µ—Å—Ç–µ, –∑–∞ —Å—Ç–∞–ª—å–Ω–æ–π —Å—Ç–µ–Ω–æ–π\\."

	CommandStart = "start"
	ReqReference = "—Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ"

	// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏ –¥–ª—è —é–∑–µ—Ä–∞
	gameLocTochka1 = "54.596840, 55.801314" // —Å—Ç–æ–ª–± –∫–∏—Ä–ø–∏—á
	gameLocTochka2 = "54.595245, 55.802220" // —Å—Ç–æ–ª–± –º–æ–ª–Ω–∏—è
	gameLocTochka3 = "54.594835, 55.801694" // —Å—Ç–æ–ª–± —á–µ—Ä–µ–ø
	gameLocMagaz   = "54.594884, 55.800410" // –Ω–µ–¥–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω
)

type RespMsg struct {
	Message      string
	Type         string
	FilePath     string
	FileName     string
	Stage        int
	ReferenceMsg string
	Images       []string
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func ProcessMessagesText(txt string, pullStage int) RespMsg {

	txt = strings.ToLower(txt)

	switch txt {
	case ReqReference:
		var message string
		switch pullStage {
		case 1:
			return RespMsg{
				Message: RespStage1 + fmt.Sprintf("\n\n`%v`\n", gameLocTochka1) + fmt.Sprintf("\n`%v`\n", gameLocTochka2) + fmt.Sprintf("\n`%v`\n", gameLocTochka3) + RespStage11,
				Type:    TypeStr,
				Stage:   1,
			}
		case 2:
			return RespMsg{
				Message:  RespStage2,
				Type:     TypeImg,
				FilePath: ImgFileOblast,
				Stage:    2,
			}
		case 3:
			return RespMsg{
				Message: RespStage3 + fmt.Sprintf("\n\n`%v`\n", gameLocMagaz),
				Type:    TypeStr,
				Stage:   3,
			}
		case 4:
			return RespMsg{
				Message:  RespStage4,
				Type:     TypeImg,
				FilePath: ImgFileKrDom,
				Stage:    4,
			}
		case 5:
			return RespMsg{
				//Message:  RespStage4,
				Type:     TypeAudio,
				FilePath: AudioFileDedMoroz,
				FileName: AudioFileDedMorozName,
				Stage:    5,
			}
		case 6:
			return RespMsg{
				Message: RespStage6,
				Type:    TypeStr,
				Stage:   6,
			}
		case 7:
			return RespMsg{
				Message: RespStage7NePidor,
				Type:    TypeImgs,
				Stage:   7,
				Images:  []string{ImgNews4, ImgNews1, ImgNews7, ImgNews5, ImgNews2, ImgNews6, ImgNews3},
			}
		case 8:
			return RespMsg{
				Message: RespStage8,
				Type:    TypeStr,
				Stage:   8,
			}
		case 9:
			return RespMsg{
				Message: RespStage9,
				Type:    TypeStr,
				Stage:   9,
			}
		}

		return RespMsg{
			Message: message,
			Type:    TypeStr,
			Stage:   0,
		}

	case ReqStage1:
		if pullStage == 1 {
			return RespMsg{
				Message:  RespStage2,
				Type:     TypeImg,
				FilePath: ImgFileOblast,
				Stage:    2,
			}
		}

	case ReqStage2:
		if pullStage == 2 {
			return RespMsg{
				Message: RespStage3 + fmt.Sprintf("\n\n`%v`\n", gameLocMagaz),
				Type:    TypeStr,
				Stage:   3,
			}
		}

	case ReqStage3:
		if pullStage == 3 {
			return RespMsg{
				Message:  RespStage4,
				Type:     TypeImg,
				FilePath: ImgFileKrDom,
				Stage:    4,
			}
		}

	case ReqStage4:
		if pullStage == 4 {
			return RespMsg{
				//Message:  RespStage4,
				Type:     TypeAudio,
				FilePath: AudioFileDedMoroz,
				FileName: AudioFileDedMorozName,
				Stage:    5,
			}
		}

	case ReqStage5:
		if pullStage == 5 {
			return RespMsg{
				Message: RespStage6,
				Type:    TypeStr,
				Stage:   6,
			}
		}

	case ReqStage6Net:
		if pullStage == 6 {
			return RespMsg{
				Message: RespStage7Pidor,
				Type:    TypeStr,
				Stage:   6,
			}
		}

	case ReqStage6Da:
		if pullStage == 6 {
			return RespMsg{
				Message: RespStage7NePidor,
				Type:    TypeImgs,
				Stage:   7,
				Images:  []string{ImgNews4, ImgNews1, ImgNews7, ImgNews5, ImgNews2, ImgNews6, ImgNews3},
			}
		}

	case ReqStage7:
		if pullStage == 7 {
			return RespMsg{
				Message: RespStage8,
				Type:    TypeStr,
				Stage:   8,
			}
		}

	case ReqStage8:
		if pullStage == 8 {
			return RespMsg{
				Message: RespStage9,
				Type:    TypeStr,
				Stage:   9,
			}
		}
	}

	return RespMsg{}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞)
func ProcessMessagesCommand(com string, pullStage int) RespMsg {

	switch com {
	case CommandStart:
		if pullStage == 0 {
			return RespMsg{
				Message: RespStage1 + fmt.Sprintf("\n\n`%v`\n", gameLocTochka1) + fmt.Sprintf("\n`%v`\n", gameLocTochka2) + fmt.Sprintf("\n`%v`\n", gameLocTochka3) + RespStage11,
				Type:    TypeStr,
				Stage:   1,
			}
		} else {
			return RespMsg{
				Message: RespDubleOpening,
				Type:    TypeStr,
				Stage:   1,
			}
		}
	}
	return RespMsg{}
}
