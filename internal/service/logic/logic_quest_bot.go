package logic

import "fmt"

const (
	// –¢–∏–ø—ã –æ—Ç–≤–µ—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	TypeStr   = "str"
	TypeImg   = "img"
	TypeAudio = "audio"

	// –§–∞–π–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–ø–∞
	ImgFileMagaz      = "files/Magaz.png"
	AudioFileDedMoroz = "files/ded.mp3"
	ImgFileOblast200  = "files/Location200.png"

	// –û—Ç–≤–µ—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

	// –¢–µ–∫—Å—Ç –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
	RespDubleOpening = "–¢—ã —É–∂–µ –Ω–∞—á–∞–ª –∏–≥—Ä—É"

	RespStage1  = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –¥–æ—Ä–æ–≥–∏–µ –¥—Ä—É–∑—å—è\\! –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º –∏—Å–ø–æ—Ä—á–µ–Ω–∞: –∫–æ–µ\\-–∫—Ç–æ –ø–æ—Ö–∏—Ç–∏–ª –ø–æ–¥–∞—Ä–∫–∏, –∞ –∑–∞–æ–¥–Ω–æ –∏ –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞\\! –¢–µ–ø–µ—Ä—å –≤—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ–∏ –º–æ–∑–≥–∏ –∏ –ª–æ–≤–∫–æ—Å—Ç—å –Ω–∞–π—Ç–∏ —ç—Ç–∏ –ø–æ–¥–∞—Ä–∫–∏ –∏ —Å–ø–∞—Å—Ç–∏ —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞, –µ—Å–ª–∏ —Å–º–æ–∂–µ—Ç–µ, –∫–æ–Ω–µ—á–Ω–æ‚ò†Ô∏è‚ò†Ô∏è‚ò†Ô∏è\\. –ò –ø–æ–º–Ω–∏—Ç–µ, —á–µ–º –¥–æ–ª—å—à–µ –≤—ã –¥–µ–π—Å—Ç–≤—É–µ—Ç–µ, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ –∑–∞–º–µ—Ä–∑–∞–µ—Ç –≤–∞—à –¥—Ä—É–≥ü•∂ü•∂ü•∂\\. –£–¥–∞—á–∏\\! \n–ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º\\:"
	RespStage11 = " \n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ–ø–∏—Ä—É—é—Ç—Å—è –∫–ª–∏–∫–æ–º\\. \n–í –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–µ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏ –ø–æ 1 –∫–æ–¥—É, –∞ –¥–∞–ª—å—à–µ –≤—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å–∞–º–∏"
	ReqStage1   = "–ª—é–±–æ–π –∫–æ–¥"

	RespStage2 = "–£ –≤–∞—Å –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é\\! –¢–µ–ø–µ—Ä—å –ø–æ–∏–≥—Ä–∞–µ–º –≤ –≥–æ—Ä—è—á–æ\\-—Ö–æ–ª–æ–¥–Ω–æ\\: –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –∞ —è –±—É–¥—É –≥–æ–≤–æ—Ä–∏—Ç—å –±–ª–∏–∑–∫–æ –≤—ã –∏–ª–∏ –¥–∞–ª–µ–∫–æ, –≤ —Ü–µ–ª–µ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏ –Ω–∞–π–¥–∏—Ç–µ –æ–¥–∏–Ω –∫–æ–¥\\. \n–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —á–µ—Ä–µ–∑ –≤–ª–æ–∂–µ–Ω–∏—è \\(–∑–Ω–∞—á–æ–∫ —Å–∫—Ä–µ–ø–∫–∏\\)\\."
	ReqStage2  = "–µ—â–µ –∫–æ–¥"

	RespStage3 = "–ú–æ–ª–æ–¥—Ü—ã, —Ç–µ–ø–µ—Ä—å –Ω–∞–π–¥–∏ 3 qr –∫–æ–¥–∞ –≤ –æ–¥–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –∏ —Å–æ–±–µ—Ä–∏ –∏–∑ –Ω–∏—Ö —Ñ—Ä–∞–∑—É\\. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã\\:" // –ù–∞—á–∞–ª–æ –≤—Ç–æ—Ä–æ–≥–æ —ç—Ç–∞–ø–∞
	ReqStage3  = "–ª—é–±–∞—è —Ñ—Ä–∞–∑–∞"

	RespStage4 = "–ê —Ç–µ–ø–µ—Ä—å, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–ø–∞—Å—Ç–∏ —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞, –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Å—é –≥–ª—É–±–∏–Ω—É —Å—Ç—Ä–∞—Ö–∞ –∏ –æ—Ç—á–∞—è–Ω–∏—è\\."
	ReqStage4  = "–ï–±–∞—Ç—å —Ö–æ–ª–æ–¥–Ω–æ"

	RespStage5 = "stage 4"
	ReqStage5  = "5"

	CommandStart = "start"
	ReqReference = "–°–ø—Ä–∞–≤–∫–∞"

	// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏ –¥–ª—è —é–∑–µ—Ä–∞
	gameLocTochka1 = "54.596341, 55.800177"
	gameLocTochka2 = "54.000000, 55.000000"
	gameLocTochka3 = "54.111111, 55.111111"
	gameLocKrDom   = "54.595539, 55.800322"
	gameLocMagaz   = "54.594908, 55.800422"

	// –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
	refLat1 = 54.596341
	refLon1 = 55.800177
)

type RespMsg struct {
	Message      string
	Type         string
	FilePath     string
	Stage        int
	ReferenceMsg string
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func ProcessMessagesText(txt string, pullStage int) RespMsg {

	switch txt {
	case ReqReference:
		var message string
		switch pullStage {
		case 1:
			return RespMsg{
				Message: RespStage1 + fmt.Sprintf("\n\n`%v`\n", gameLocTochka1) + fmt.Sprintf("\n`%v`\n", gameLocTochka2) + fmt.Sprintf("\n`%v`\n", gameLocTochka3) + RespStage11,
				Type:    TypeStr,
				Stage:   1,
			}
		case 2:
			return RespMsg{
				Message:  RespStage2,
				Type:     TypeImg,
				FilePath: ImgFileOblast200,
				Stage:    2,
			}
		case 3:
			return RespMsg{
				Message: RespStage3 + fmt.Sprintf("\n\n`%v`\n", gameLocKrDom),
				Type:    TypeStr,
				Stage:   3,
			}
		case 4:
			return RespMsg{
				Message:  RespStage4,
				Type:     TypeImg,
				FilePath: ImgFileMagaz,
				Stage:    4,
			}
		case 5:
			return RespMsg{
				//Message:  RespStage4,
				Type:     TypeAudio,
				FilePath: AudioFileDedMoroz,
				Stage:    5,
			}
		case 6:
			message = "–≠"
		case 7:
			message = "–≠"
		case 8:
			message = "–≠"
		}

		return RespMsg{
			Message: message,
			Type:    TypeStr,
			Stage:   0,
		}

	case ReqStage1:
		if pullStage == 1 {
			return RespMsg{
				Message:  RespStage2,
				Type:     TypeImg,
				FilePath: ImgFileOblast200,
				Stage:    2,
			}
		}

	case ReqStage2:
		if pullStage == 2 {
			return RespMsg{
				Message: RespStage3 + fmt.Sprintf("\n\n`%v`\n", gameLocKrDom),
				Type:    TypeStr,
				Stage:   3,
			}
		}

	case ReqStage3:
		if pullStage == 3 {
			return RespMsg{
				Message:  RespStage4,
				Type:     TypeImg,
				FilePath: ImgFileMagaz,
				Stage:    4,
			}
		}

	case ReqStage4:
		if pullStage == 4 {
			return RespMsg{
				//Message:  RespStage4,
				Type:     TypeAudio,
				FilePath: AudioFileDedMoroz,
				Stage:    5,
			}
		}
	case ReqStage5:
		if pullStage == 5 {
			return RespMsg{
				Message: "–≠",
				Type:    TypeStr,
				Stage:   6,
			}
		}
	}
	return RespMsg{}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞)
func ProcessMessagesCommand(com string, pullStage int) RespMsg {

	switch com {
	case CommandStart:
		if pullStage == 0 {
			return RespMsg{
				Message: RespStage1 + fmt.Sprintf("\n\n`%v`\n", gameLocTochka1) + fmt.Sprintf("\n`%v`\n", gameLocTochka2) + fmt.Sprintf("\n`%v`\n", gameLocTochka3) + RespStage11,
				Type:    TypeStr,
				Stage:   1,
			}
		} else {
			return RespMsg{
				Message: RespDubleOpening,
				Type:    TypeStr,
				Stage:   1,
			}
		}
	}
	return RespMsg{}
}
